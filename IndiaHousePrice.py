# -*- coding: utf-8 -*-
"""IndiaHousePrice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w-Lv1j49YlcEwbpbHR-UwpV4ENqJ9XSz
"""

# Step 1: Import library
import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Step 2: Streamlit App
st.title("House Price Prediction")

# Step 1: Upload Dataset
uploaded_file = st.file_uploader("Upload your dataset (CSV format)", type=["csv"])
if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
    st.write("Dataset Preview:")
    st.dataframe(data.head())
else:
    # Load the default dataset if no file is uploaded
    try:
        data = pd.read_csv('IndiaHousePrice.csv')
        st.write("Using default dataset (IndiaHousePrice.csv):")
        st.dataframe(data.head())
    except FileNotFoundError:
        st.error("Please upload a dataset or ensure IndiaHousePrice.csv is in the project folder.")
        st.stop()

if 'data' in locals():

    # Step 2: Feature Selection
    st.write("### Define Features and Target Variable")
    X = data[['Number of bedrooms', 'Number of bathrooms', 'Living area sqft',
              'Number of schools nearby', 'Distance from the airport']]
    y = data['Price']
    
    # Show data statistics to help users understand the ranges
    with st.expander("📊 View Data Statistics (Click to expand)"):
        st.write("**Feature Ranges in Training Data:**")
        stats_df = X.describe().round(2)
        st.dataframe(stats_df)
        st.write(f"**Price Range:** ₹{y.min():,.2f} - ₹{y.max():,.2f}")
        st.write(f"**Average Price:** ₹{y.mean():,.2f}")

    # Step 3: Split Data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2529)

    # Step 4: Train Model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Step 5: Evaluate Model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    st.write(f"Model Mean Squared Error (MSE): {mse:.2f}")

    # Step 6: Make Predictions
    st.write("### Make Predictions")
    
    # Add some guidance for users
    st.info("💡 **Tip:** Enter realistic values to get accurate predictions. Very small living areas or values of 0 might result in unrealistic predictions.")
    
    col1, col2 = st.columns(2)
    
    with col1:
        bedrooms = st.number_input("Number of bedrooms", min_value=1, max_value=10, value=3, step=1)
        bathrooms = st.number_input("Number of bathrooms", min_value=1, max_value=10, value=2, step=1)
        living_area = st.number_input("Living area (sqft)", min_value=500, max_value=10000, value=2000, step=50)
    
    with col2:
        schools_nearby = st.number_input("Number of schools nearby", min_value=0, max_value=10, value=2, step=1)
        distance_airport = st.number_input("Distance from the airport (km)", min_value=1.0, max_value=200.0, value=50.0, step=1.0)

    if st.button("Predict Price"):
        input_data = pd.DataFrame({
            'Number of bedrooms': [bedrooms],
            'Number of bathrooms': [bathrooms],
            'Living area sqft': [living_area],
            'Number of schools nearby': [schools_nearby],
            'Distance from the airport': [distance_airport]
        })
        prediction = model.predict(input_data)[0]
        
        # Ensure prediction is not negative
        if prediction < 0:
            st.warning("⚠️ The model predicted a negative price. This might indicate unusual input values.")
            st.write(f"Raw Prediction: ₹{prediction:,.2f}")
            st.write(f"Adjusted Prediction: ₹{abs(prediction):,.2f} (absolute value)")
            st.info("💡 Tip: Try adjusting your input values. Very low living area or high distance from airport might cause negative predictions.")
        else:
            st.success(f"🏠 Predicted Price: ₹{prediction:,.2f}")
else:
    st.write("Please upload a dataset to proceed.")